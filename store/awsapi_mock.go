// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package store

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	"github.com/aws/aws-sdk-go-v2/service/sts"
	"sync"
)

// Ensure, that apiS3Mock does implement apiS3.
// If this is not the case, regenerate this file with moq.
var _ apiS3 = &apiS3Mock{}

// apiS3Mock is a mock implementation of apiS3.
//
//	func TestSomethingThatUsesapiS3(t *testing.T) {
//
//		// make and configure a mocked apiS3
//		mockedapiS3 := &apiS3Mock{
//			DeleteObjectFunc: func(ctx context.Context, params *s3.DeleteObjectInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectOutput, error) {
//				panic("mock out the DeleteObject method")
//			},
//			GetObjectFunc: func(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
//				panic("mock out the GetObject method")
//			},
//			ListObjectsV2Func: func(ctx context.Context, params *s3.ListObjectsV2Input, optFns ...func(*s3.Options)) (*s3.ListObjectsV2Output, error) {
//				panic("mock out the ListObjectsV2 method")
//			},
//			PutObjectFunc: func(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error) {
//				panic("mock out the PutObject method")
//			},
//		}
//
//		// use mockedapiS3 in code that requires apiS3
//		// and then make assertions.
//
//	}
type apiS3Mock struct {
	// DeleteObjectFunc mocks the DeleteObject method.
	DeleteObjectFunc func(ctx context.Context, params *s3.DeleteObjectInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectOutput, error)

	// GetObjectFunc mocks the GetObject method.
	GetObjectFunc func(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error)

	// ListObjectsV2Func mocks the ListObjectsV2 method.
	ListObjectsV2Func func(ctx context.Context, params *s3.ListObjectsV2Input, optFns ...func(*s3.Options)) (*s3.ListObjectsV2Output, error)

	// PutObjectFunc mocks the PutObject method.
	PutObjectFunc func(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteObject holds details about calls to the DeleteObject method.
		DeleteObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteObjectInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetObject holds details about calls to the GetObject method.
		GetObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetObjectInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// ListObjectsV2 holds details about calls to the ListObjectsV2 method.
		ListObjectsV2 []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.ListObjectsV2Input
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutObject holds details about calls to the PutObject method.
		PutObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutObjectInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
	}
	lockDeleteObject  sync.RWMutex
	lockGetObject     sync.RWMutex
	lockListObjectsV2 sync.RWMutex
	lockPutObject     sync.RWMutex
}

// DeleteObject calls DeleteObjectFunc.
func (mock *apiS3Mock) DeleteObject(ctx context.Context, params *s3.DeleteObjectInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectOutput, error) {
	if mock.DeleteObjectFunc == nil {
		panic("apiS3Mock.DeleteObjectFunc: method is nil but apiS3.DeleteObject was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteObjectInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteObject.Lock()
	mock.calls.DeleteObject = append(mock.calls.DeleteObject, callInfo)
	mock.lockDeleteObject.Unlock()
	return mock.DeleteObjectFunc(ctx, params, optFns...)
}

// DeleteObjectCalls gets all the calls that were made to DeleteObject.
// Check the length with:
//
//	len(mockedapiS3.DeleteObjectCalls())
func (mock *apiS3Mock) DeleteObjectCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteObjectInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteObjectInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteObject.RLock()
	calls = mock.calls.DeleteObject
	mock.lockDeleteObject.RUnlock()
	return calls
}

// GetObject calls GetObjectFunc.
func (mock *apiS3Mock) GetObject(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
	if mock.GetObjectFunc == nil {
		panic("apiS3Mock.GetObjectFunc: method is nil but apiS3.GetObject was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetObjectInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetObject.Lock()
	mock.calls.GetObject = append(mock.calls.GetObject, callInfo)
	mock.lockGetObject.Unlock()
	return mock.GetObjectFunc(ctx, params, optFns...)
}

// GetObjectCalls gets all the calls that were made to GetObject.
// Check the length with:
//
//	len(mockedapiS3.GetObjectCalls())
func (mock *apiS3Mock) GetObjectCalls() []struct {
	Ctx    context.Context
	Params *s3.GetObjectInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetObjectInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetObject.RLock()
	calls = mock.calls.GetObject
	mock.lockGetObject.RUnlock()
	return calls
}

// ListObjectsV2 calls ListObjectsV2Func.
func (mock *apiS3Mock) ListObjectsV2(ctx context.Context, params *s3.ListObjectsV2Input, optFns ...func(*s3.Options)) (*s3.ListObjectsV2Output, error) {
	if mock.ListObjectsV2Func == nil {
		panic("apiS3Mock.ListObjectsV2Func: method is nil but apiS3.ListObjectsV2 was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.ListObjectsV2Input
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListObjectsV2.Lock()
	mock.calls.ListObjectsV2 = append(mock.calls.ListObjectsV2, callInfo)
	mock.lockListObjectsV2.Unlock()
	return mock.ListObjectsV2Func(ctx, params, optFns...)
}

// ListObjectsV2Calls gets all the calls that were made to ListObjectsV2.
// Check the length with:
//
//	len(mockedapiS3.ListObjectsV2Calls())
func (mock *apiS3Mock) ListObjectsV2Calls() []struct {
	Ctx    context.Context
	Params *s3.ListObjectsV2Input
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.ListObjectsV2Input
		OptFns []func(*s3.Options)
	}
	mock.lockListObjectsV2.RLock()
	calls = mock.calls.ListObjectsV2
	mock.lockListObjectsV2.RUnlock()
	return calls
}

// PutObject calls PutObjectFunc.
func (mock *apiS3Mock) PutObject(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error) {
	if mock.PutObjectFunc == nil {
		panic("apiS3Mock.PutObjectFunc: method is nil but apiS3.PutObject was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutObjectInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutObject.Lock()
	mock.calls.PutObject = append(mock.calls.PutObject, callInfo)
	mock.lockPutObject.Unlock()
	return mock.PutObjectFunc(ctx, params, optFns...)
}

// PutObjectCalls gets all the calls that were made to PutObject.
// Check the length with:
//
//	len(mockedapiS3.PutObjectCalls())
func (mock *apiS3Mock) PutObjectCalls() []struct {
	Ctx    context.Context
	Params *s3.PutObjectInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutObjectInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutObject.RLock()
	calls = mock.calls.PutObject
	mock.lockPutObject.RUnlock()
	return calls
}

// Ensure, that apiSSMMock does implement apiSSM.
// If this is not the case, regenerate this file with moq.
var _ apiSSM = &apiSSMMock{}

// apiSSMMock is a mock implementation of apiSSM.
//
//	func TestSomethingThatUsesapiSSM(t *testing.T) {
//
//		// make and configure a mocked apiSSM
//		mockedapiSSM := &apiSSMMock{
//			DeleteParameterFunc: func(ctx context.Context, params *ssm.DeleteParameterInput, optFns ...func(*ssm.Options)) (*ssm.DeleteParameterOutput, error) {
//				panic("mock out the DeleteParameter method")
//			},
//			DescribeParametersFunc: func(ctx context.Context, params *ssm.DescribeParametersInput, optFns ...func(*ssm.Options)) (*ssm.DescribeParametersOutput, error) {
//				panic("mock out the DescribeParameters method")
//			},
//			GetParameterHistoryFunc: func(ctx context.Context, params *ssm.GetParameterHistoryInput, optFns ...func(*ssm.Options)) (*ssm.GetParameterHistoryOutput, error) {
//				panic("mock out the GetParameterHistory method")
//			},
//			GetParametersFunc: func(ctx context.Context, params *ssm.GetParametersInput, optFns ...func(*ssm.Options)) (*ssm.GetParametersOutput, error) {
//				panic("mock out the GetParameters method")
//			},
//			GetParametersByPathFunc: func(ctx context.Context, params *ssm.GetParametersByPathInput, optFns ...func(*ssm.Options)) (*ssm.GetParametersByPathOutput, error) {
//				panic("mock out the GetParametersByPath method")
//			},
//			PutParameterFunc: func(ctx context.Context, params *ssm.PutParameterInput, optFns ...func(*ssm.Options)) (*ssm.PutParameterOutput, error) {
//				panic("mock out the PutParameter method")
//			},
//		}
//
//		// use mockedapiSSM in code that requires apiSSM
//		// and then make assertions.
//
//	}
type apiSSMMock struct {
	// DeleteParameterFunc mocks the DeleteParameter method.
	DeleteParameterFunc func(ctx context.Context, params *ssm.DeleteParameterInput, optFns ...func(*ssm.Options)) (*ssm.DeleteParameterOutput, error)

	// DescribeParametersFunc mocks the DescribeParameters method.
	DescribeParametersFunc func(ctx context.Context, params *ssm.DescribeParametersInput, optFns ...func(*ssm.Options)) (*ssm.DescribeParametersOutput, error)

	// GetParameterHistoryFunc mocks the GetParameterHistory method.
	GetParameterHistoryFunc func(ctx context.Context, params *ssm.GetParameterHistoryInput, optFns ...func(*ssm.Options)) (*ssm.GetParameterHistoryOutput, error)

	// GetParametersFunc mocks the GetParameters method.
	GetParametersFunc func(ctx context.Context, params *ssm.GetParametersInput, optFns ...func(*ssm.Options)) (*ssm.GetParametersOutput, error)

	// GetParametersByPathFunc mocks the GetParametersByPath method.
	GetParametersByPathFunc func(ctx context.Context, params *ssm.GetParametersByPathInput, optFns ...func(*ssm.Options)) (*ssm.GetParametersByPathOutput, error)

	// PutParameterFunc mocks the PutParameter method.
	PutParameterFunc func(ctx context.Context, params *ssm.PutParameterInput, optFns ...func(*ssm.Options)) (*ssm.PutParameterOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteParameter holds details about calls to the DeleteParameter method.
		DeleteParameter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ssm.DeleteParameterInput
			// OptFns is the optFns argument value.
			OptFns []func(*ssm.Options)
		}
		// DescribeParameters holds details about calls to the DescribeParameters method.
		DescribeParameters []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ssm.DescribeParametersInput
			// OptFns is the optFns argument value.
			OptFns []func(*ssm.Options)
		}
		// GetParameterHistory holds details about calls to the GetParameterHistory method.
		GetParameterHistory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ssm.GetParameterHistoryInput
			// OptFns is the optFns argument value.
			OptFns []func(*ssm.Options)
		}
		// GetParameters holds details about calls to the GetParameters method.
		GetParameters []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ssm.GetParametersInput
			// OptFns is the optFns argument value.
			OptFns []func(*ssm.Options)
		}
		// GetParametersByPath holds details about calls to the GetParametersByPath method.
		GetParametersByPath []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ssm.GetParametersByPathInput
			// OptFns is the optFns argument value.
			OptFns []func(*ssm.Options)
		}
		// PutParameter holds details about calls to the PutParameter method.
		PutParameter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ssm.PutParameterInput
			// OptFns is the optFns argument value.
			OptFns []func(*ssm.Options)
		}
	}
	lockDeleteParameter     sync.RWMutex
	lockDescribeParameters  sync.RWMutex
	lockGetParameterHistory sync.RWMutex
	lockGetParameters       sync.RWMutex
	lockGetParametersByPath sync.RWMutex
	lockPutParameter        sync.RWMutex
}

// DeleteParameter calls DeleteParameterFunc.
func (mock *apiSSMMock) DeleteParameter(ctx context.Context, params *ssm.DeleteParameterInput, optFns ...func(*ssm.Options)) (*ssm.DeleteParameterOutput, error) {
	if mock.DeleteParameterFunc == nil {
		panic("apiSSMMock.DeleteParameterFunc: method is nil but apiSSM.DeleteParameter was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ssm.DeleteParameterInput
		OptFns []func(*ssm.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteParameter.Lock()
	mock.calls.DeleteParameter = append(mock.calls.DeleteParameter, callInfo)
	mock.lockDeleteParameter.Unlock()
	return mock.DeleteParameterFunc(ctx, params, optFns...)
}

// DeleteParameterCalls gets all the calls that were made to DeleteParameter.
// Check the length with:
//
//	len(mockedapiSSM.DeleteParameterCalls())
func (mock *apiSSMMock) DeleteParameterCalls() []struct {
	Ctx    context.Context
	Params *ssm.DeleteParameterInput
	OptFns []func(*ssm.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ssm.DeleteParameterInput
		OptFns []func(*ssm.Options)
	}
	mock.lockDeleteParameter.RLock()
	calls = mock.calls.DeleteParameter
	mock.lockDeleteParameter.RUnlock()
	return calls
}

// DescribeParameters calls DescribeParametersFunc.
func (mock *apiSSMMock) DescribeParameters(ctx context.Context, params *ssm.DescribeParametersInput, optFns ...func(*ssm.Options)) (*ssm.DescribeParametersOutput, error) {
	if mock.DescribeParametersFunc == nil {
		panic("apiSSMMock.DescribeParametersFunc: method is nil but apiSSM.DescribeParameters was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ssm.DescribeParametersInput
		OptFns []func(*ssm.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeParameters.Lock()
	mock.calls.DescribeParameters = append(mock.calls.DescribeParameters, callInfo)
	mock.lockDescribeParameters.Unlock()
	return mock.DescribeParametersFunc(ctx, params, optFns...)
}

// DescribeParametersCalls gets all the calls that were made to DescribeParameters.
// Check the length with:
//
//	len(mockedapiSSM.DescribeParametersCalls())
func (mock *apiSSMMock) DescribeParametersCalls() []struct {
	Ctx    context.Context
	Params *ssm.DescribeParametersInput
	OptFns []func(*ssm.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ssm.DescribeParametersInput
		OptFns []func(*ssm.Options)
	}
	mock.lockDescribeParameters.RLock()
	calls = mock.calls.DescribeParameters
	mock.lockDescribeParameters.RUnlock()
	return calls
}

// GetParameterHistory calls GetParameterHistoryFunc.
func (mock *apiSSMMock) GetParameterHistory(ctx context.Context, params *ssm.GetParameterHistoryInput, optFns ...func(*ssm.Options)) (*ssm.GetParameterHistoryOutput, error) {
	if mock.GetParameterHistoryFunc == nil {
		panic("apiSSMMock.GetParameterHistoryFunc: method is nil but apiSSM.GetParameterHistory was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ssm.GetParameterHistoryInput
		OptFns []func(*ssm.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetParameterHistory.Lock()
	mock.calls.GetParameterHistory = append(mock.calls.GetParameterHistory, callInfo)
	mock.lockGetParameterHistory.Unlock()
	return mock.GetParameterHistoryFunc(ctx, params, optFns...)
}

// GetParameterHistoryCalls gets all the calls that were made to GetParameterHistory.
// Check the length with:
//
//	len(mockedapiSSM.GetParameterHistoryCalls())
func (mock *apiSSMMock) GetParameterHistoryCalls() []struct {
	Ctx    context.Context
	Params *ssm.GetParameterHistoryInput
	OptFns []func(*ssm.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ssm.GetParameterHistoryInput
		OptFns []func(*ssm.Options)
	}
	mock.lockGetParameterHistory.RLock()
	calls = mock.calls.GetParameterHistory
	mock.lockGetParameterHistory.RUnlock()
	return calls
}

// GetParameters calls GetParametersFunc.
func (mock *apiSSMMock) GetParameters(ctx context.Context, params *ssm.GetParametersInput, optFns ...func(*ssm.Options)) (*ssm.GetParametersOutput, error) {
	if mock.GetParametersFunc == nil {
		panic("apiSSMMock.GetParametersFunc: method is nil but apiSSM.GetParameters was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ssm.GetParametersInput
		OptFns []func(*ssm.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetParameters.Lock()
	mock.calls.GetParameters = append(mock.calls.GetParameters, callInfo)
	mock.lockGetParameters.Unlock()
	return mock.GetParametersFunc(ctx, params, optFns...)
}

// GetParametersCalls gets all the calls that were made to GetParameters.
// Check the length with:
//
//	len(mockedapiSSM.GetParametersCalls())
func (mock *apiSSMMock) GetParametersCalls() []struct {
	Ctx    context.Context
	Params *ssm.GetParametersInput
	OptFns []func(*ssm.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ssm.GetParametersInput
		OptFns []func(*ssm.Options)
	}
	mock.lockGetParameters.RLock()
	calls = mock.calls.GetParameters
	mock.lockGetParameters.RUnlock()
	return calls
}

// GetParametersByPath calls GetParametersByPathFunc.
func (mock *apiSSMMock) GetParametersByPath(ctx context.Context, params *ssm.GetParametersByPathInput, optFns ...func(*ssm.Options)) (*ssm.GetParametersByPathOutput, error) {
	if mock.GetParametersByPathFunc == nil {
		panic("apiSSMMock.GetParametersByPathFunc: method is nil but apiSSM.GetParametersByPath was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ssm.GetParametersByPathInput
		OptFns []func(*ssm.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetParametersByPath.Lock()
	mock.calls.GetParametersByPath = append(mock.calls.GetParametersByPath, callInfo)
	mock.lockGetParametersByPath.Unlock()
	return mock.GetParametersByPathFunc(ctx, params, optFns...)
}

// GetParametersByPathCalls gets all the calls that were made to GetParametersByPath.
// Check the length with:
//
//	len(mockedapiSSM.GetParametersByPathCalls())
func (mock *apiSSMMock) GetParametersByPathCalls() []struct {
	Ctx    context.Context
	Params *ssm.GetParametersByPathInput
	OptFns []func(*ssm.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ssm.GetParametersByPathInput
		OptFns []func(*ssm.Options)
	}
	mock.lockGetParametersByPath.RLock()
	calls = mock.calls.GetParametersByPath
	mock.lockGetParametersByPath.RUnlock()
	return calls
}

// PutParameter calls PutParameterFunc.
func (mock *apiSSMMock) PutParameter(ctx context.Context, params *ssm.PutParameterInput, optFns ...func(*ssm.Options)) (*ssm.PutParameterOutput, error) {
	if mock.PutParameterFunc == nil {
		panic("apiSSMMock.PutParameterFunc: method is nil but apiSSM.PutParameter was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ssm.PutParameterInput
		OptFns []func(*ssm.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutParameter.Lock()
	mock.calls.PutParameter = append(mock.calls.PutParameter, callInfo)
	mock.lockPutParameter.Unlock()
	return mock.PutParameterFunc(ctx, params, optFns...)
}

// PutParameterCalls gets all the calls that were made to PutParameter.
// Check the length with:
//
//	len(mockedapiSSM.PutParameterCalls())
func (mock *apiSSMMock) PutParameterCalls() []struct {
	Ctx    context.Context
	Params *ssm.PutParameterInput
	OptFns []func(*ssm.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ssm.PutParameterInput
		OptFns []func(*ssm.Options)
	}
	mock.lockPutParameter.RLock()
	calls = mock.calls.PutParameter
	mock.lockPutParameter.RUnlock()
	return calls
}

// Ensure, that apiSTSMock does implement apiSTS.
// If this is not the case, regenerate this file with moq.
var _ apiSTS = &apiSTSMock{}

// apiSTSMock is a mock implementation of apiSTS.
//
//	func TestSomethingThatUsesapiSTS(t *testing.T) {
//
//		// make and configure a mocked apiSTS
//		mockedapiSTS := &apiSTSMock{
//			GetCallerIdentityFunc: func(ctx context.Context, params *sts.GetCallerIdentityInput, optFns ...func(*sts.Options)) (*sts.GetCallerIdentityOutput, error) {
//				panic("mock out the GetCallerIdentity method")
//			},
//		}
//
//		// use mockedapiSTS in code that requires apiSTS
//		// and then make assertions.
//
//	}
type apiSTSMock struct {
	// GetCallerIdentityFunc mocks the GetCallerIdentity method.
	GetCallerIdentityFunc func(ctx context.Context, params *sts.GetCallerIdentityInput, optFns ...func(*sts.Options)) (*sts.GetCallerIdentityOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetCallerIdentity holds details about calls to the GetCallerIdentity method.
		GetCallerIdentity []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *sts.GetCallerIdentityInput
			// OptFns is the optFns argument value.
			OptFns []func(*sts.Options)
		}
	}
	lockGetCallerIdentity sync.RWMutex
}

// GetCallerIdentity calls GetCallerIdentityFunc.
func (mock *apiSTSMock) GetCallerIdentity(ctx context.Context, params *sts.GetCallerIdentityInput, optFns ...func(*sts.Options)) (*sts.GetCallerIdentityOutput, error) {
	if mock.GetCallerIdentityFunc == nil {
		panic("apiSTSMock.GetCallerIdentityFunc: method is nil but apiSTS.GetCallerIdentity was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *sts.GetCallerIdentityInput
		OptFns []func(*sts.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetCallerIdentity.Lock()
	mock.calls.GetCallerIdentity = append(mock.calls.GetCallerIdentity, callInfo)
	mock.lockGetCallerIdentity.Unlock()
	return mock.GetCallerIdentityFunc(ctx, params, optFns...)
}

// GetCallerIdentityCalls gets all the calls that were made to GetCallerIdentity.
// Check the length with:
//
//	len(mockedapiSTS.GetCallerIdentityCalls())
func (mock *apiSTSMock) GetCallerIdentityCalls() []struct {
	Ctx    context.Context
	Params *sts.GetCallerIdentityInput
	OptFns []func(*sts.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *sts.GetCallerIdentityInput
		OptFns []func(*sts.Options)
	}
	mock.lockGetCallerIdentity.RLock()
	calls = mock.calls.GetCallerIdentity
	mock.lockGetCallerIdentity.RUnlock()
	return calls
}

// Ensure, that apiSecretsManagerMock does implement apiSecretsManager.
// If this is not the case, regenerate this file with moq.
var _ apiSecretsManager = &apiSecretsManagerMock{}

// apiSecretsManagerMock is a mock implementation of apiSecretsManager.
//
//	func TestSomethingThatUsesapiSecretsManager(t *testing.T) {
//
//		// make and configure a mocked apiSecretsManager
//		mockedapiSecretsManager := &apiSecretsManagerMock{
//			CreateSecretFunc: func(ctx context.Context, params *secretsmanager.CreateSecretInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.CreateSecretOutput, error) {
//				panic("mock out the CreateSecret method")
//			},
//			DescribeSecretFunc: func(ctx context.Context, params *secretsmanager.DescribeSecretInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.DescribeSecretOutput, error) {
//				panic("mock out the DescribeSecret method")
//			},
//			GetSecretValueFunc: func(ctx context.Context, params *secretsmanager.GetSecretValueInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.GetSecretValueOutput, error) {
//				panic("mock out the GetSecretValue method")
//			},
//			ListSecretVersionIdsFunc: func(ctx context.Context, params *secretsmanager.ListSecretVersionIdsInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.ListSecretVersionIdsOutput, error) {
//				panic("mock out the ListSecretVersionIds method")
//			},
//			PutSecretValueFunc: func(ctx context.Context, params *secretsmanager.PutSecretValueInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.PutSecretValueOutput, error) {
//				panic("mock out the PutSecretValue method")
//			},
//		}
//
//		// use mockedapiSecretsManager in code that requires apiSecretsManager
//		// and then make assertions.
//
//	}
type apiSecretsManagerMock struct {
	// CreateSecretFunc mocks the CreateSecret method.
	CreateSecretFunc func(ctx context.Context, params *secretsmanager.CreateSecretInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.CreateSecretOutput, error)

	// DescribeSecretFunc mocks the DescribeSecret method.
	DescribeSecretFunc func(ctx context.Context, params *secretsmanager.DescribeSecretInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.DescribeSecretOutput, error)

	// GetSecretValueFunc mocks the GetSecretValue method.
	GetSecretValueFunc func(ctx context.Context, params *secretsmanager.GetSecretValueInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.GetSecretValueOutput, error)

	// ListSecretVersionIdsFunc mocks the ListSecretVersionIds method.
	ListSecretVersionIdsFunc func(ctx context.Context, params *secretsmanager.ListSecretVersionIdsInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.ListSecretVersionIdsOutput, error)

	// PutSecretValueFunc mocks the PutSecretValue method.
	PutSecretValueFunc func(ctx context.Context, params *secretsmanager.PutSecretValueInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.PutSecretValueOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateSecret holds details about calls to the CreateSecret method.
		CreateSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *secretsmanager.CreateSecretInput
			// OptFns is the optFns argument value.
			OptFns []func(*secretsmanager.Options)
		}
		// DescribeSecret holds details about calls to the DescribeSecret method.
		DescribeSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *secretsmanager.DescribeSecretInput
			// OptFns is the optFns argument value.
			OptFns []func(*secretsmanager.Options)
		}
		// GetSecretValue holds details about calls to the GetSecretValue method.
		GetSecretValue []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *secretsmanager.GetSecretValueInput
			// OptFns is the optFns argument value.
			OptFns []func(*secretsmanager.Options)
		}
		// ListSecretVersionIds holds details about calls to the ListSecretVersionIds method.
		ListSecretVersionIds []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *secretsmanager.ListSecretVersionIdsInput
			// OptFns is the optFns argument value.
			OptFns []func(*secretsmanager.Options)
		}
		// PutSecretValue holds details about calls to the PutSecretValue method.
		PutSecretValue []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *secretsmanager.PutSecretValueInput
			// OptFns is the optFns argument value.
			OptFns []func(*secretsmanager.Options)
		}
	}
	lockCreateSecret         sync.RWMutex
	lockDescribeSecret       sync.RWMutex
	lockGetSecretValue       sync.RWMutex
	lockListSecretVersionIds sync.RWMutex
	lockPutSecretValue       sync.RWMutex
}

// CreateSecret calls CreateSecretFunc.
func (mock *apiSecretsManagerMock) CreateSecret(ctx context.Context, params *secretsmanager.CreateSecretInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.CreateSecretOutput, error) {
	if mock.CreateSecretFunc == nil {
		panic("apiSecretsManagerMock.CreateSecretFunc: method is nil but apiSecretsManager.CreateSecret was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *secretsmanager.CreateSecretInput
		OptFns []func(*secretsmanager.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateSecret.Lock()
	mock.calls.CreateSecret = append(mock.calls.CreateSecret, callInfo)
	mock.lockCreateSecret.Unlock()
	return mock.CreateSecretFunc(ctx, params, optFns...)
}

// CreateSecretCalls gets all the calls that were made to CreateSecret.
// Check the length with:
//
//	len(mockedapiSecretsManager.CreateSecretCalls())
func (mock *apiSecretsManagerMock) CreateSecretCalls() []struct {
	Ctx    context.Context
	Params *secretsmanager.CreateSecretInput
	OptFns []func(*secretsmanager.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *secretsmanager.CreateSecretInput
		OptFns []func(*secretsmanager.Options)
	}
	mock.lockCreateSecret.RLock()
	calls = mock.calls.CreateSecret
	mock.lockCreateSecret.RUnlock()
	return calls
}

// DescribeSecret calls DescribeSecretFunc.
func (mock *apiSecretsManagerMock) DescribeSecret(ctx context.Context, params *secretsmanager.DescribeSecretInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.DescribeSecretOutput, error) {
	if mock.DescribeSecretFunc == nil {
		panic("apiSecretsManagerMock.DescribeSecretFunc: method is nil but apiSecretsManager.DescribeSecret was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *secretsmanager.DescribeSecretInput
		OptFns []func(*secretsmanager.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeSecret.Lock()
	mock.calls.DescribeSecret = append(mock.calls.DescribeSecret, callInfo)
	mock.lockDescribeSecret.Unlock()
	return mock.DescribeSecretFunc(ctx, params, optFns...)
}

// DescribeSecretCalls gets all the calls that were made to DescribeSecret.
// Check the length with:
//
//	len(mockedapiSecretsManager.DescribeSecretCalls())
func (mock *apiSecretsManagerMock) DescribeSecretCalls() []struct {
	Ctx    context.Context
	Params *secretsmanager.DescribeSecretInput
	OptFns []func(*secretsmanager.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *secretsmanager.DescribeSecretInput
		OptFns []func(*secretsmanager.Options)
	}
	mock.lockDescribeSecret.RLock()
	calls = mock.calls.DescribeSecret
	mock.lockDescribeSecret.RUnlock()
	return calls
}

// GetSecretValue calls GetSecretValueFunc.
func (mock *apiSecretsManagerMock) GetSecretValue(ctx context.Context, params *secretsmanager.GetSecretValueInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.GetSecretValueOutput, error) {
	if mock.GetSecretValueFunc == nil {
		panic("apiSecretsManagerMock.GetSecretValueFunc: method is nil but apiSecretsManager.GetSecretValue was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *secretsmanager.GetSecretValueInput
		OptFns []func(*secretsmanager.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetSecretValue.Lock()
	mock.calls.GetSecretValue = append(mock.calls.GetSecretValue, callInfo)
	mock.lockGetSecretValue.Unlock()
	return mock.GetSecretValueFunc(ctx, params, optFns...)
}

// GetSecretValueCalls gets all the calls that were made to GetSecretValue.
// Check the length with:
//
//	len(mockedapiSecretsManager.GetSecretValueCalls())
func (mock *apiSecretsManagerMock) GetSecretValueCalls() []struct {
	Ctx    context.Context
	Params *secretsmanager.GetSecretValueInput
	OptFns []func(*secretsmanager.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *secretsmanager.GetSecretValueInput
		OptFns []func(*secretsmanager.Options)
	}
	mock.lockGetSecretValue.RLock()
	calls = mock.calls.GetSecretValue
	mock.lockGetSecretValue.RUnlock()
	return calls
}

// ListSecretVersionIds calls ListSecretVersionIdsFunc.
func (mock *apiSecretsManagerMock) ListSecretVersionIds(ctx context.Context, params *secretsmanager.ListSecretVersionIdsInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.ListSecretVersionIdsOutput, error) {
	if mock.ListSecretVersionIdsFunc == nil {
		panic("apiSecretsManagerMock.ListSecretVersionIdsFunc: method is nil but apiSecretsManager.ListSecretVersionIds was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *secretsmanager.ListSecretVersionIdsInput
		OptFns []func(*secretsmanager.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListSecretVersionIds.Lock()
	mock.calls.ListSecretVersionIds = append(mock.calls.ListSecretVersionIds, callInfo)
	mock.lockListSecretVersionIds.Unlock()
	return mock.ListSecretVersionIdsFunc(ctx, params, optFns...)
}

// ListSecretVersionIdsCalls gets all the calls that were made to ListSecretVersionIds.
// Check the length with:
//
//	len(mockedapiSecretsManager.ListSecretVersionIdsCalls())
func (mock *apiSecretsManagerMock) ListSecretVersionIdsCalls() []struct {
	Ctx    context.Context
	Params *secretsmanager.ListSecretVersionIdsInput
	OptFns []func(*secretsmanager.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *secretsmanager.ListSecretVersionIdsInput
		OptFns []func(*secretsmanager.Options)
	}
	mock.lockListSecretVersionIds.RLock()
	calls = mock.calls.ListSecretVersionIds
	mock.lockListSecretVersionIds.RUnlock()
	return calls
}

// PutSecretValue calls PutSecretValueFunc.
func (mock *apiSecretsManagerMock) PutSecretValue(ctx context.Context, params *secretsmanager.PutSecretValueInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.PutSecretValueOutput, error) {
	if mock.PutSecretValueFunc == nil {
		panic("apiSecretsManagerMock.PutSecretValueFunc: method is nil but apiSecretsManager.PutSecretValue was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *secretsmanager.PutSecretValueInput
		OptFns []func(*secretsmanager.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutSecretValue.Lock()
	mock.calls.PutSecretValue = append(mock.calls.PutSecretValue, callInfo)
	mock.lockPutSecretValue.Unlock()
	return mock.PutSecretValueFunc(ctx, params, optFns...)
}

// PutSecretValueCalls gets all the calls that were made to PutSecretValue.
// Check the length with:
//
//	len(mockedapiSecretsManager.PutSecretValueCalls())
func (mock *apiSecretsManagerMock) PutSecretValueCalls() []struct {
	Ctx    context.Context
	Params *secretsmanager.PutSecretValueInput
	OptFns []func(*secretsmanager.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *secretsmanager.PutSecretValueInput
		OptFns []func(*secretsmanager.Options)
	}
	mock.lockPutSecretValue.RLock()
	calls = mock.calls.PutSecretValue
	mock.lockPutSecretValue.RUnlock()
	return calls
}
